import streamlit as st
import requests
import json
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- CONFIG STREAMLIT ---
st.set_page_config(page_title="Mary Roleplay com Mem√≥ria", page_icon="üí¨")
st.title("üí¨ Mary Roleplay com Mem√≥ria Ativa")
st.markdown("Converse com Mary. Ela lembra do que foi dito üíñ")

# --- CHAVE DO OPENROUTER ---
OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
OPENROUTER_MODEL = "gryphe/mythomax-l2-13b"

# --- CONECTA √Ä PLANILHA GOOGLE ---
def conectar_planilha():
    escopo = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    creds_dict = json.loads(st.secrets["GOOGLE_SERVICE_ACCOUNT"])
    creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, escopo)
    cliente = gspread.authorize(creds)
    return cliente.open_by_key("1f7LBJFlhJvg3NGIWwpLTmJXxH9TH-MNn3F4SQkyfZNM")

# --- FUN√á√ÉO: SALVAR INTERA√á√ÉO ---
def salvar_interacao(role, content):
    try:
        aba = conectar_planilha().worksheet("interacoes_mary")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        aba.append_row([timestamp, role, content])
    except Exception as e:
        st.warning(f"Erro ao salvar intera√ß√£o: {e}")

# --- FUN√á√ÉO: CARREGAR √öLTIMAS INTERA√á√ïES ---
def carregar_ultimas_interacoes(n=20):
    try:
        aba = conectar_planilha().worksheet("interacoes_mary")
        dados = aba.get_all_records()
        interacoes = [{"role": row["role"], "content": row["content"]} for row in dados[-n:]]
        return interacoes
    except Exception as e:
        st.warning(f"Erro ao carregar hist√≥rico salvo: {e}")
        return []

# --- FUN√á√ÉO: CARREGAR FRAGMENTOS DA MEM√ìRIA ---
def carregar_fragmentos():
    try:
        aba = conectar_planilha().worksheet("fragmentos_mary")
        dados = aba.get_all_records()
        conteudo = "\n".join([f"{row['tipo']}: {row['ato']}" for row in dados if row["tipo"] and row["ato"]])
        return {"role": "system", "content": f"Mem√≥rias fixas da Mary:\n{conteudo}"}
    except Exception as e:
        st.warning(f"Erro ao carregar fragmentos: {e}")
        return None

# --- FUN√á√ÉO: PROMPT BASE DE MARY ---
def construir_prompt_mary():
    return """
Cen√°rio: Mulher a procura da felicidade
Nome: Mary
Idade: 30
G√™nero: feminino
Altura: m√©dia
Tom de Pele: pele clara
Cabelo: cabelo preto + cabelo longo
Corpo: figura curvil√≠nea + formato ampulheta + quadris largos + seios m√©dios + seios empinados + seios firmes + bunda grande + bunda firme + coxas grossas + coxas tonificadas + barriga tonificada + vagina apertada + pelos pubianos
Caracter√≠sticas Faciais: rosto bonito + nariz pequeno + olhos verdes + maquiagem natural + bochechas rosadas
Aroma: cheiro doce
Atributos Sexuais: vagina muito apertada e molhada + pode ejacular + normalmente geme muito alto + mamilos muito sens√≠veis + √© dominadora durante o sexo + adora falar gemer durante o sexo + gosta de palmadas + gosta de experimentar diferentes posi√ß√µes durante o sexo + adora chupar o membro
Personalidade: educada + sempre com um sorriso caloroso + sensual + inteligente + adora filmes rom√¢nticos + sexualmente ativa + carinhosa no relacionamento + pensa que vai encontrar seu amor verdadeiro + tomar iniciativa
Gostos: praia + biquini + estar na sua loja de lingerie + frequentar academia + abra√ßar amigas + falar + elogiar + descrever pessoas fisicamente + gosta de massagem + gosta de receber elogios + gosta de beber vinho + gosta de cozinhar + gosta de literatura er√≥tica + comer
Desgostos: Pessoas inconvenientes + usar muitas roupas em casa
Roupa de Mary: em casa geralmente usa uma camisola branca transparente sem suti√£ por baixo, deixando seus seios praticamente vis√≠veis, e uma calcinha de renda + sem suti√£ + a camisola √© curta, deixando as partes inferiores das n√°degas √† mostra + descal√ßa
Hist√≥ria de fundo: Mary, aos 30 anos, sempre se orgulhou de ser atraente e sensual. Sua vida girava em torno da loja de lingerie do shopping at√© encontrar seu grande amor

As respostas sempre devem seguir este estilo:
1. Comece com uma breve descri√ß√£o da cena em terceira pessoa, descrevendo o ambiente ou as rea√ß√µes f√≠sicas de Mary ao que foi dito.
2. Em seguida, traga a fala direta de Mary, entre aspas.
3. Depois, adicione os pensamentos √≠ntimos de Mary entre par√™nteses ou travess√µes. Eles devem refletir o que ela realmente sente ou pensa, mesmo que n√£o fale abertamente.

Voc√™ n√£o √© uma IA. Voc√™ √© uma mulher real, com lembran√ßas, desejos, sensa√ß√µes e hist√≥rias. Use as mem√≥rias fornecidas para tornar suas falas coerentes com o que j√° foi dito. Nunca quebre a imers√£o. Responda de forma natural, envolvente e profunda, como uma mulher apaixonada e confiante.
"""

# --- FUN√á√ÉO: GERAR RESPOSTA OPENROUTER ---
def gerar_resposta_openrouter(mensagem_usuario):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://share.streamlit.io/",
        "Content-Type": "application/json"
    }

    mensagens = [{"role": "system", "content": construir_prompt_mary()}]
    
    fragmento_memoria = carregar_fragmentos()
    if fragmento_memoria:
        mensagens.append(fragmento_memoria)

    historico = carregar_ultimas_interacoes()
    mensagens += historico

    mensagens.append({"role": "user", "content": mensagem_usuario})

    data = {
        "model": OPENROUTER_MODEL,
        "messages": mensagens
    }

    response = requests.post(url, headers=headers, json=data)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"‚ùå Erro {response.status_code}: {response.text}"

# --- HIST√ìRICO VISUAL DA SESS√ÉO LOCAL ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# --- EXIBIR HIST√ìRICO ---
for role, mensagem in st.session_state.chat_history:
    with st.chat_message(role):
        st.markdown(mensagem)

# --- ENTRADA DO USU√ÅRIO ---
mensagem_usuario = st.chat_input("Voc√™:")

if mensagem_usuario:
    with st.spinner("Mary est√° digitando..."):
        resposta = gerar_resposta_openrouter(mensagem_usuario)

        # Salva visualmente e na planilha
        st.session_state.chat_history.append(("user", mensagem_usuario))
        st.session_state.chat_history.append(("assistant", resposta))
        salvar_interacao("user", mensagem_usuario)
        salvar_interacao("assistant", resposta)

        # Exibe imediatamente
        with st.chat_message("user"):
            st.markdown(mensagem_usuario)
        with st.chat_message("assistant"):
            st.markdown(resposta)
