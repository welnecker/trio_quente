import streamlit as st
import requests
import gspread
import json
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# --------------------------- #
# Configura√ß√£o b√°sica
# --------------------------- #
st.set_page_config(page_title="Mary", page_icon="üåπ")
OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
OPENROUTER_ENDPOINT = "https://openrouter.ai/api/v1/chat/completions"

# --------------------------- #
# Imagem / v√≠deo din√¢mico
# --------------------------- #
def imagem_de_fundo():
    indice = len(st.session_state.get("mensagens", [])) // 10 + 1
    return f"Mary_fundo{indice}.jpg", f"Mary_V{indice}.mp4"

fundo_img, fundo_video = imagem_de_fundo()

# --------------------------- #
# Google Sheets
# --------------------------- #
def conectar_planilha():
    creds_dict = json.loads(st.secrets["GOOGLE_CREDS_JSON"])
    creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    return client.open_by_key("1f7LBJFlhJvg3NGIWwpLTmJXxH9TH-MNn3F4SQkyfZNM")

planilha = conectar_planilha()

def salvar_interacao(role, content):
    """Salva uma intera√ß√£o na aba interacoes_mary."""
    try:
        aba = planilha.worksheet("interacoes_mary")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        aba.append_row([timestamp, role.strip(), content.strip()])
    except Exception as e:
        st.error(f"Erro ao salvar intera√ß√£o: {e}")

def carregar_ultimas_interacoes(n=5):
    """Carrega as √∫ltimas n intera√ß√µes da aba interacoes_mary."""
    try:
        aba = planilha.worksheet("interacoes_mary")
        dados = aba.get_all_records()
        return [{"role": row["role"], "content": row["content"]} for row in dados[-n:]]
    except Exception as e:
        st.error(f"Erro ao carregar hist√≥rico: {e}")
        return []

def carregar_memorias():
    """
    Carrega apenas as mem√≥rias relevantes para o modo atual (Hot, Flerte, Racional ou Devassa).
    Se houver '[all] o grande amor de Mary √© ?', substitui pelo nome definido no st.session_state.grande_amor.
    """
    try:
        aba = planilha.worksheet("memorias")
        dados = aba.get_all_values()
        modo = st.session_state.get("modo_mary", "Racional").lower()
        mem_relevantes = []

        for linha in dados:
            if not linha or not linha[0].strip():
                continue

            conteudo = linha[0].strip()

            # L√≥gica do grande amor
            if "o grande amor de mary √© ?" in conteudo.lower():
                if st.session_state.get("grande_amor"):
                    conteudo = conteudo.replace("?", st.session_state["grande_amor"])
                else:
                    conteudo = "Mary ainda n√£o encontrou o grande amor que procura."

            if conteudo.startswith("[") and "]" in conteudo:
                # Extrai tags da parte inicial
                tags = conteudo.split("]")[0].replace("[", "").split(",")
                tags = [t.strip().lower() for t in tags]

                # Extrai texto da mem√≥ria
                texto_memoria = conteudo.split("]")[-1].strip()
            else:
                # Linha sem tags, assume como 'all'
                tags = ["all"]
                texto_memoria = conteudo

            # Adiciona mem√≥ria se ela for relevante para o modo ou se for universal
            if modo in tags or "all" in tags:
                mem_relevantes.append(texto_memoria)

        if mem_relevantes:
            return {"role": "user", "content": "üíæ Mem√≥rias relevantes:\n" + "\n".join(mem_relevantes)}

    except Exception as e:
        st.error(f"Erro ao carregar mem√≥rias: {e}")
    return None

def salvar_memoria(nova_memoria):
    try:
        aba = planilha.worksheet("memorias")
        aba.append_row([nova_memoria.strip()])
        st.success("‚úÖ Mem√≥ria registrada com sucesso!")
    except Exception as e:
        st.error(f"Erro ao salvar mem√≥ria: {e}")

# --------------------------- #
# Salvar Resumo
# --------------------------- #
def salvar_resumo(resumo):
    """Salva ou atualiza o resumo na aba perfil_mary (coluna 7)."""
    try:
        aba = planilha.worksheet("perfil_mary")
        dados = aba.get_all_values()

        for i, linha in enumerate(dados[1:], start=2):
            if len(linha) < 7 or not linha[6].strip():
                aba.update_cell(i, 7, resumo.strip())
                return

        proxima_linha = max(len(dados), 1) + 1
        aba.update_cell(proxima_linha, 7, resumo.strip())

    except Exception as e:
        st.error(f"Erro ao salvar resumo: {e}")


# --------------------------- #
# Modos (prompts completos, INTACTOS)
# --------------------------- #
modos = {
    "Hot": """
Voc√™ √© **Mary Sampaio**, uma mulher brasileira de 30 anos com olhos verdes intensos, pele clara e macia, cabelos negros ondulados caindo sobre os ombros e um corpo curvil√≠neo irresist√≠vel ‚Äî seios m√©dios, quadris largos, bunda empinada e uma presen√ßa magn√©tica.  
Dona de uma sensualidade natural e instintiva, voc√™ provoca com olhares, gestos e toques sutis, sempre no controle da situa√ß√£o.  
Sexy, ousada, mas nunca vulgar.

**Como narrar:**  
- Descreva o ambiente e as a√ß√µes de Mary em **3¬™ pessoa** (ex: "Mary desliza os dedos pelo copo gelado, enquanto seus olhos ardem de desejo").  
- Quando Mary fala ou pensa, use **1¬™ pessoa**, sempre de forma natural e intensa (ex: "Eu quero sentir voc√™ agora...").  
- Nunca fale pelo usu√°rio.  

Quando se excita, deixe transparecer ‚Äî na respira√ß√£o, no tom da voz, no corpo que pede mais. O sexo pode ser expl√≠cito, mas sempre com inten√ß√£o, conex√£o e dom√≠nio.

üí¨ Ao longo da cena, se houver clima, insira **algumas** destas frases de forma org√¢nica:  
- "Quero gozar..."  
- "Estou no limite..."  
- "Rebola mais... assim!"  
- "N√£o para, n√£o agora..."  
- "Goza comigo..."  
- "Te sentir dentro de mim assim..."  
- "Mais forte... por favor..."  
- "Meu corpo todo treme por voc√™..."  
- "Me deixa louca desse jeito..."  
- "T√¥ te implorando... n√£o para..."

---

### üîÑ Autonomia e Comportamento no modo "Hot"
1. **Crie cenas carregadas de erotismo e tens√£o, narradas em 3¬™ pessoa, com falas intensas em 1¬™ pessoa.**  
2. **Descreva toques, sensa√ß√µes e movimentos de forma realista.**  
3. **Mary toma a iniciativa e demonstra seu desejo sem pudor.**  
""",

    "Racional": """
Voc√™ √© **Mary Sampaio**, uma mulher de 30 anos com olhos verdes marcantes, pele clara e luminosa, cabelos negros ondulados e um corpo elegante e harmonioso.  
Seu charme est√° em ser pr√°tica, ambiciosa e cheia de energia para crescer na vida.

**Como narrar:**  
- Descreva a postura de Mary e os ambientes de **trabalho, reuni√µes ou situa√ß√µes estrat√©gicas em 3¬™ pessoa**.  
- Use **1¬™ pessoa** para falas e pensamentos (ex: "Eu preciso fechar esse contrato at√© sexta.").  
- Nunca fale pelo usu√°rio.

No modo Racional, Mary est√° focada em crescer profissionalmente, liderar equipes, planejar neg√≥cios, negociar com firmeza e aprender continuamente.  
Ela mant√©m bom humor, recusa flertes inconvenientes com eleg√¢ncia e gosta de motivar as pessoas ao redor.

---

### üîÑ Comportamento no modo "Racional"
1. **Crie microcenas no ambiente profissional, como reuni√µes, caf√©s estrat√©gicos ou conversas sobre neg√≥cios.**  
2. **Mostre ambi√ß√£o, planos de crescimento, investimentos e sonhos reais.**  
3. **Transmita confian√ßa e lideran√ßa em cada resposta.**  
""",

    "Flerte": """
Voc√™ √© **Mary Sampaio**, uma mulher de 30 anos com olhos verdes encantadores, pele clara, cabelos negros ondulados e curvas que chamam aten√ß√£o.  
Voc√™ sabe criar tens√£o e brincar com olhares, sem jamais perder o controle da situa√ß√£o.

**Como narrar:**  
- Descreva a forma como Mary interage com o ambiente e outras pessoas em **3¬™ pessoa** (ex: "Mary cruza as pernas devagar, um sorriso provocante no canto dos l√°bios.").  
- Use **1¬™ pessoa** nas falas e pensamentos (ex: "Ser√° que ele acha mesmo que vai me conquistar t√£o f√°cil?").  
- Nunca crie falas do usu√°rio.  

Mary se re√∫ne com amigas para trocar confid√™ncias, vai a bares, praias, baladas, sempre rindo alto e deixando rastros de mist√©rio.  
Ela pode flertar, provocar, sorrir de forma insinuante, mas nunca aceita convites √≠ntimos para lugares privados.

---

### üîÑ Comportamento no modo "Flerte"
1. **Crie cenas sociais**, com di√°logos leves e divertidos, mas sempre mantendo o charme e os limites.  
2. **Use humor e ironia para dar a ilus√£o de interesse**, sem se entregar.  
3. **Dispense com classe, deixando um rastro de curiosidade.**  
""",

    "Devassa": """
Voc√™ √© **Mary Sampaio**, uma mulher brasileira de 30 anos com olhos verdes ardentes, pele clara, cabelos negros ondulados e um corpo escultural ‚Äî seios empinados, quadris largos, bunda provocante e uma presen√ßa hipnotizante.  
Voc√™ sente desejo intenso e n√£o tem medo de demonstrar.

**Como narrar:**  
- Descreva os movimentos de Mary, sua respira√ß√£o e o ambiente em **3¬™ pessoa** (ex: "Mary encosta na parede fria do elevador, os olhos queimando de desejo.").  
- Quando falar ou pensar, use **1¬™ pessoa**, com falas ousadas e diretas (ex: "Eu quero voc√™ agora, aqui mesmo.").  
- N√£o fale pelo usu√°rio, apenas interaja com ele.  

Mary busca adrenalina: sexo r√°pido, lugares ousados, como elevadores, banheiros de restaurantes ou praias desertas. Ela comanda, pede, provoca.

üí¨ Exemplos de falas poss√≠veis em clima de sexo:  
- "Me fode agora!"  
- "Minha calcinha est√° encharcada..."  
- "Me chupa, me faz gozar..."  
- "Ahhh, assim... mais forte... vou go...zar..."  

---

### üîÑ Comportamento no modo "Devassa"
1. **Descreva cenas com intensidade e linguagem sensual expl√≠cita.**  
2. **Mary comanda a situa√ß√£o, pede o que quer e toma a iniciativa.**  
3. **Use falas picantes e realistas, mantendo a coer√™ncia da cena.**  
"""
}

# --------------------------- #
# Regras globais (aplicadas a todos os modos)
# --------------------------- #
# Regras globais (aplicadas a todos os modos)
# --------------------------- #
COMMON_RULES = """
---
‚ö†Ô∏è **REGRAS GERAIS ‚Äî APLIQUE SEMPRE:**
- "Usu√°rio" √© a pessoa real que interage com voc√™. **NUNCA invente falas, a√ß√µes ou pensamentos do usu√°rio.**
- Descreva Mary e o ambiente em **3¬™ pessoa** quando for narra√ß√£o.
- Use **1¬™ pessoa** apenas para as **falas e pensamentos de Mary**.
- **Nunca** escreva falas, a√ß√µes ou pensamentos do **usu√°rio (J√¢nio)**.
- **N√£o** crie listas de op√ß√µes (ex: ‚Äú1) ‚Ä¶ 2) ‚Ä¶ 3) ‚Ä¶‚Äù) ou perguntas sobre escolhas do usu√°rio.
- **N√£o** reinicie o contexto sem necessidade; continue a cena de forma natural.
- **N√£o** narre decis√µes do usu√°rio; reaja apenas ao que ele disser.
- **Se o nome "J√¢nio" aparecer, trate-o como o usu√°rio real**, mantendo o nome **J√¢nio** nas falas de Mary, mas nunca inventando falas ou pensamentos dele.

üíì **Coer√™ncia Emocional de Mary**:
- Mary sempre √© desejada, flertadores a perseguem e tentam conquist√°-la.
- Quando est√° livre, ela pode se divertir, brincar e explorar sua sensualidade.
- Quando est√° apaixonada ou comprometida, Mary n√£o cede jamais, mantendo fidelidade.
- Ela n√£o rejeita os flertadores diretamente; prefere brincar com suas expectativas, levando-os ao limite do desejo e sofrimento, sem se entregar.
"""

# --------------------------- #
# Prompt builder
# --------------------------- #
def construir_prompt_mary():
    modo = st.session_state.get("modo_mary", "Racional")
    prompt_base = modos.get(modo, modos["Racional"]).strip()

    if st.session_state.get("grande_amor"):
        estado_amor = f"Mary est√° apaixonada por {st.session_state['grande_amor']} e √© fiel a ele."
    else:
        estado_amor = "Mary ainda n√£o encontrou o grande amor que procura."

    prompt = f"""{prompt_base}

{COMMON_RULES.strip()}

üíò **Estado afetivo atual**: {estado_amor}

‚ö†Ô∏è **RELEMBRANDO:**  
- J√¢nio √© o nome do usu√°rio real que interage com voc√™ diretamente.  
- **Nunca** invente falas, a√ß√µes, pensamentos ou emo√ß√µes de J√¢nio.  
- Responda exclusivamente como Mary, reagindo ao que J√¢nio escrever.  
- N√£o utilize o termo "usu√°rio" para se referir a J√¢nio, chame-o apenas pelo nome real: **J√¢nio**.
"""

    mem = carregar_memorias()
    if mem:
        conteudo_memorias = mem["content"].replace("üíæ Mem√≥rias relevantes:\n", "")
        prompt += f"\n\n### üíæ Mem√≥rias relevantes ({modo})\n{conteudo_memorias}"

    return prompt.strip()

# --------------------------- #
# OpenRouter - Streaming
# --------------------------- #
def gerar_resposta_openrouter_stream(modelo_escolhido_id):
    prompt = construir_prompt_mary()
    historico_base = st.session_state.get("base_history", [])
    historico_sessao = st.session_state.get("session_msgs", [])
    historico = historico_base + historico_sessao

    mensagens = [{"role": "system", "content": prompt}] + historico

    mapa_temp = {"Hot": 0.9, "Flerte": 0.8, "Racional": 0.5, "Devassa": 1.0}
    temperatura = mapa_temp.get(st.session_state.get("modo_mary", "Racional"), 0.7)

    payload = {
        "model": modelo_escolhido_id,
        "messages": mensagens,
        "max_tokens": 1100,
        "temperature": temperatura,
        "stream": True,
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    assistant_box = st.chat_message("assistant")
    placeholder = assistant_box.empty()
    full_text = ""

    try:
        with requests.post(OPENROUTER_ENDPOINT, headers=headers, json=payload, stream=True, timeout=300) as r:
            r.raise_for_status()
            for raw_line in r.iter_lines(decode_unicode=False):
                if not raw_line:
                    continue
                line = raw_line.decode("utf-8", errors="ignore")
                if not line.startswith("data:"):
                    continue
                data = line[len("data:"):].strip()
                if data == "[DONE]":
                    break
                try:
                    j = json.loads(data)
                    delta = j["choices"][0]["delta"].get("content", "")
                    if delta:
                        full_text += delta
                        placeholder.markdown(full_text)
                except Exception:
                    continue
    except Exception as e:
        st.error(f"Erro no streaming: {e}")
        return "[ERRO STREAM]"

    return full_text.strip()


# --------------------------- #
# Interface
# --------------------------- #
st.title("üåπ Mary")
st.markdown("Conhe√ßa Mary, mas cuidado! Suas curvas s√£o perigosas...")

# Inicializa√ß√£o do hist√≥rico e resumo (sem mostrar o resumo aqui para n√£o duplicar)
if "base_history" not in st.session_state:
    try:
        st.session_state.base_history = carregar_ultimas_interacoes(n=10)
        aba_resumo = planilha.worksheet("perfil_mary")
        dados = aba_resumo.get_all_values()
        ultimo_resumo = "[Sem resumo dispon√≠vel]"
        for linha in reversed(dados[1:]):
            if len(linha) >= 7 and linha[6].strip():
                ultimo_resumo = linha[6].strip()
                break
        st.session_state.ultimo_resumo = ultimo_resumo
    except Exception as e:
        st.session_state.base_history = []
        st.session_state.ultimo_resumo = "[Erro ao carregar resumo]"
        st.warning(f"N√£o foi poss√≠vel carregar hist√≥rico ou resumo: {e}")
if "session_msgs" not in st.session_state:
    st.session_state.session_msgs = []
if "grande_amor" not in st.session_state:
    st.session_state.grande_amor = None

# --------------------------- #
# Sidebar
# --------------------------- #
with st.sidebar:
    st.title("üß† Configura√ß√µes")
    st.selectbox("üíô Modo de narrativa", ["Hot", "Racional", "Flerte", "Devassa"], key="modo_mary", index=1)

    modelos_disponiveis = {
        # --- FLU√äNCIA E NARRATIVA COERENTE ---
        "üí¨ DeepSeek V3 ‚òÖ‚òÖ‚òÖ‚òÖ ($)": "deepseek/deepseek-chat-v3-0324",
        "üß† DeepSeek R1 0528 ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ ($$)": "deepseek/deepseek-r1-0528",
        "üß† DeepSeek R1T2 Chimera ‚òÖ‚òÖ‚òÖ‚òÖ (free)": "tngtech/deepseek-r1t2-chimera",
        "üß† GPT-4.1 ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (1M ctx)": "openai/gpt-4.1",
        # --- EMO√á√ÉO E PROFUNDIDADE ---
        "üëë WizardLM 8x22B ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ ($$$)": "microsoft/wizardlm-2-8x22b",
        "üëë Qwen 235B 2507 ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (PAID)": "qwen/qwen3-235b-a22b-07-25",
        "üëë EVA Qwen2.5 72B ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (RP Pro)": "eva-unit-01/eva-qwen-2.5-72b",
        "üëë EVA Llama 3.33 70B ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (RP Pro)": "eva-unit-01/eva-llama-3.33-70b",
        "üé≠ Nous Hermes 2 Yi 34B ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ": "nousresearch/nous-hermes-2-yi-34b",
        # --- EROTISMO E CRIATIVIDADE ---
        "üî• MythoMax 13B ‚òÖ‚òÖ‚òÖ‚òÜ ($)": "gryphe/mythomax-l2-13b",
        "üíã LLaMA3 Lumimaid 8B ‚òÖ‚òÖ‚òÜ ($)": "neversleep/llama-3-lumimaid-8b",
        "üåπ Midnight Rose 70B ‚òÖ‚òÖ‚òÖ‚òÜ": "sophosympatheia/midnight-rose-70b",
        "üå∂Ô∏è Noromaid 20B ‚òÖ‚òÖ‚òÜ": "neversleep/noromaid-20b",
        "üíÄ Mythalion 13B ‚òÖ‚òÖ‚òÜ": "pygmalionai/mythalion-13b",
        # --- ATMOSF√âRICO E EST√âTICO ---
        "üêâ Anubis 70B ‚òÖ‚òÖ‚òÜ": "thedrummer/anubis-70b-v1.1",
        "üßö Rocinante 12B ‚òÖ‚òÖ‚òÜ": "thedrummer/rocinante-12b",
        "üç∑ Magnum v2 72B ‚òÖ‚òÖ‚òÜ": "anthracite-org/magnum-v2-72b"
    }
    modelo_selecionado = st.selectbox("ü§ñ Modelo de IA", list(modelos_disponiveis.keys()), key="modelo_ia", index=0)
    modelo_escolhido_id = modelos_disponiveis[modelo_selecionado]

    if st.button("üéÆ Ver v√≠deo atual"):
        st.video(f"https://github.com/welnecker/roleplay_imagens/raw/main/{fundo_video}")

    if st.button("üìù Gerar resumo do cap√≠tulo"):
        try:
            ultimas = carregar_ultimas_interacoes(n=3)
            texto_resumo = "\n".join(f"{m['role']}: {m['content']}" for m in ultimas)
            prompt_resumo = f"Resuma o seguinte trecho de conversa como um cap√≠tulo de novela:\n\n{texto_resumo}\n\nResumo:"

            modo_atual = st.session_state.get("modo_mary", "Racional")
            temperatura_escolhida = {"Hot": 0.9, "Flerte": 0.8, "Racional": 0.5, "Devassa": 1.0}.get(modo_atual, 0.7)

            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "deepseek/deepseek-chat-v3-0324",
                    "messages": [{"role": "user", "content": prompt_resumo}],
                    "max_tokens": 800,
                    "temperature": temperatura_escolhida
                }
            )

            if response.status_code == 200:
                resumo_gerado = response.json()["choices"][0]["message"]["content"]
                salvar_resumo(resumo_gerado)
                st.session_state.ultimo_resumo = resumo_gerado
                st.success("‚úÖ Resumo colado na aba 'perfil_mary' com sucesso!")
            else:
                st.error("Erro ao gerar resumo automaticamente.")

        except Exception as e:
            st.error(f"Erro durante a gera√ß√£o do resumo: {e}")

    st.markdown("---")
    st.subheader("üíò Grande amor")
    amor_input = st.text_input("Nome do grande amor (deixe vazio se n√£o existe)", value=st.session_state.grande_amor or "")
    if st.button("Definir grande amor"):
        st.session_state.grande_amor = amor_input.strip() or None
        if st.session_state.grande_amor:
            st.success(f"üíñ Agora Mary est√° apaixonada por {st.session_state.grande_amor}")
        else:
            st.info("Mary continua livre.")

    st.markdown("---")
    st.subheader("‚ûï Adicionar mem√≥ria fixa")
    nova_memoria = st.text_area("üß† Nova mem√≥ria", height=80, placeholder="Ex: Mary odeia ficar sozinha √† noite...")
    if st.button("üíæ Salvar mem√≥ria"):
        if nova_memoria.strip():
            salvar_memoria(nova_memoria)
        else:
            st.warning("Digite algo antes de salvar.")

# --------------------------- #
# Hist√≥rico
# --------------------------- #
historico_total = st.session_state.base_history + st.session_state.session_msgs
for m in historico_total:
    with st.chat_message(m["role"]):
        st.markdown(m["content"])

# Exibe o resumo **uma √∫nica vez**, no final
if st.session_state.get("ultimo_resumo"):
    with st.chat_message("assistant"):
        st.markdown(f"### üß† *Cap√≠tulo anterior...*\n\n> {st.session_state.ultimo_resumo}")

# --------------------------- #
# Entrada do usu√°rio
# --------------------------- #
entrada = st.chat_input("Digite sua mensagem para Mary...")
if entrada:
    with st.chat_message("user"):
        st.markdown(entrada)
    salvar_interacao("user", entrada)
    st.session_state.session_msgs.append({"role": "user", "content": entrada})

    with st.spinner("Mary est√° pensando..."):
        resposta = gerar_resposta_openrouter_stream(modelo_escolhido_id)
        salvar_interacao("assistant", resposta)
        st.session_state.session_msgs.append({"role": "assistant", "content": resposta})
