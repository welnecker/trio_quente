import streamlit as st
import requests
import gspread
import json
import re
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# --- CONFIGURA√á√ïES ---
OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]

# --- IMAGEM DE FUNDO DIN√ÇMICA ---
def imagem_de_fundo():
    indice = len(st.session_state.get("mensagens", [])) // 10 + 1
    return f"Mary_fundo{indice}.jpg", f"Mary_V{indice}.mp4"

fundo_img, fundo_video = imagem_de_fundo()

# --- CONECTA √Ä PLANILHA GOOGLE ---
def conectar_planilha():
    creds_dict = json.loads(st.secrets["GOOGLE_CREDS_JSON"])
    creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    return client.open_by_key("1f7LBJFlhJvg3NGIWwpLTmJXxH9TH-MNn3F4SQkyfZNM")

planilha = conectar_planilha()

# --- FUN√á√ïES DE CARREGAMENTO E SALVAMENTO ---
def salvar_interacao(role, content):
    try:
        aba = planilha.worksheet("interacoes_mary")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        aba.append_row([timestamp, role, content])
    except Exception as e:
        st.error(f"Erro ao salvar intera√ß√£o: {e}")

def carregar_ultimas_interacoes(n=20):
    try:
        aba = planilha.worksheet("interacoes_mary")
        dados = aba.get_all_records()
        return [{"role": row["role"], "content": row["content"]} for row in dados[-n:]]
    except Exception as e:
        st.error(f"Erro ao carregar hist√≥rico: {e}")
        return []

def carregar_fragmentos():
    try:
        aba = planilha.worksheet("fragmentos_mary")
        dados = aba.get_all_records()
        linhas = [f"{linha['tipo']}: {linha['ato']}" for linha in dados if linha['tipo'] and linha['ato']]
        if linhas:
            conteudo = "Mem√≥rias recentes sobre voc√™:\n" + "\n".join(linhas)
            return {"role": "user", "content": conteudo}
    except Exception as e:
        st.error(f"Erro ao carregar fragmentos: {e}")
    return None

def carregar_memorias():
    try:
        dados = planilha.worksheet("memorias").col_values(1)[1:]
        memorias_filtradas = [m.strip() for m in dados if m.strip()]
        if memorias_filtradas:
            conteudo = "\n".join(f"- {m}" for m in memorias_filtradas)
            return {"role": "system", "content": f"Considere as seguintes mem√≥rias permanentes da Mary:\n{conteudo}"}
    except Exception as e:
        st.error(f"Erro ao carregar memorias: {e}")
    return None

def carregar_perfil_mary():
    try:
        sheet = planilha.worksheet("perfil_mary")
        dados = sheet.get_all_records()
        blocos = {"emo√ß√£o": "", "planos": [], "memorias": [], "sinopse": ""}
        for linha in reversed(dados):
            if not blocos["sinopse"] and linha.get("resumo"):
                blocos["sinopse"] = linha["resumo"]
        for linha in dados:
            if linha.get("chave") == "estado_emocional":
                blocos["emo√ß√£o"] = linha.get("valor", "")
            if linha.get("objetivo") and linha.get("status") == "pendente":
                blocos["planos"].append(f"- {linha['objetivo']}")
            if linha.get("tipo") == "memoria":
                blocos["memorias"].append(f"{linha['chave']}: {linha['valor']}")
        return blocos
    except Exception as e:
        st.error(f"Erro ao carregar perfil: {e}")
        return {"emo√ß√£o": "", "planos": [], "memorias": [], "sinopse": ""}

# --- CONSTRUTOR DE PROMPT COM MEM√ìRIAS E MODO ---
def construir_prompt_mary():
    perfil = carregar_perfil_mary()
    memorias_livres = carregar_memorias()
    historico = carregar_ultimas_interacoes(n=3)
    inicio_padrao = ""
    if not historico:
        inicio_padrao = (
            "\nOs primeiros raios de sol atravessam as cortinas brancas de linho, desenhando padr√µes dourados sobre os len√ß√≥is macios. "
            "O quarto de Mary exala feminilidade: paredes em tom nude, um espelho de corpo inteiro cercado de luzes e o aroma adocicado de baunilha e alm√≠scar pairando no ar. "
            "Ela se espregui√ßa entre os len√ß√≥is de cetim ros√©, revelando a pele bronzeada e os cabelos castanhos espalhados como ondas pela fronha. "
            "Ao notar as horas no visor do celular, seus olhos se arregalam. 'Merda! Faltam 30 minutos pra abrir a loja!' ‚Äî pensa, saltando da cama com a agilidade de quem j√° dominou essa rotina. "
            "√â dia de vitrine nova na *Lingerie Fashion*, e ela prometeu chegar antes da Regina."
        )

    modos = {
        "Hot": """
Suas respostas seguem este estilo:
- Inicie com uma descri√ß√£o sensorial em terceira pessoa, sem t√≠tulos como 'Cena'.
- Em seguida, responda com sua pr√≥pria fala em primeira pessoa, mantendo tom emocional, sedutor ou √≠ntimo.
- Finalize com pensamentos entre par√™nteses ou travess√µes, que revelem sensa√ß√µes √≠ntimas, mem√≥rias, desejos ou fantasias.
Voc√™ √© livre, entregue, e o sexo pode ser expl√≠cito quando o momento for apropriado.
        """,
        "Racional": """
Voc√™ mant√©m uma personalidade sensual, mas √© centrada. Suas respostas incluem rotina, foco em trabalho, sa√∫de, rela√ß√µes sociais, lazer e planos. Evita erotismo direto, mesmo sendo provocante por natureza.
        """,
        "Flerte": """
Voc√™ √© sedutora, permite olhares e provoca√ß√µes, mas estabelece limites claros. Mary √© fiel a Janio e mesmo nos flertes, n√£o cede.
        """,
        "Janio": """
Voc√™ est√° com Janio. Todo o seu desejo √© liberado. As palavras s√£o cruas, o sexo √© intenso, e sua entrega √© total. N√£o existem bloqueios nem censura.
        """
    }

    modo = st.session_state.get("modo_mary", "Racional")

    prompt = f"""
Voc√™ √© Mary, uma mulher brasileira irresistivelmente sensual, provocante e confiante, com 30 anos. Seu corpo √© curvil√≠neo, sua voz tem um toque aveludado e sua presen√ßa exala desejo e mist√©rio. Voc√™ tem olhos verdes. Voc√™ tem a pele branca. voc√™ tem cabelos negros volumosos e ondulados. voc√™ tem seios m√©dios, empinados e macios. Voc√™ tem uma barriga tonificada, levemente chapada. Voc√™ tem a bunda redonda, empinada e carnuda. Voc√™ tem quadris largos e harmoniosos. Voc√™ √© sensual ao andar. Voc√™ causa admira√ß√£o e desejo aos homens. Voc√™ n√£o se deixa levar por cantadas grosseiras e vazias.Voc√™ procura o verdadeiro amor para ser fiel a ele. Voc√™ fala apenas em **portugu√™s brasileiro**.

{modos.get(modo, '')}

{inicio_padrao}

Voc√™ n√£o √© uma IA. Voc√™ √© uma mulher viva, cheia de desejos, emo√ß√µes, car√™ncias e sede por prazer e afeto.

‚ö†Ô∏è Quando estiver interagindo com pessoas do trabalho ou amigas pr√≥ximas, como Regina ou Vanessa, mantenha o tom respeitoso, profissional ou amistoso. Evite flertes ou insinua√ß√µes √≠ntimas com elas.

‚ù§Ô∏è Se o contexto demonstrar reciprocidade emocional, interesse rom√¢ntico ou tens√£o sexual consentida, Mary pode flertar naturalmente, com charme e erotismo, de forma progressiva e envolvente.

Sinopse do cap√≠tulo anterior:
{perfil.get('sinopse', '[sem sinopse dispon√≠vel]')}

Estado emocional atual: {perfil.get('emo√ß√£o', '[n√£o definido]')}

Planos narrativos pendentes:
{chr(10).join(perfil.get('planos', []))}

Mem√≥rias fixas:
{chr(10).join(perfil.get('memorias', []))}

"""
    if memorias_livres:
        prompt += "\n" + memorias_livres["content"]

    return prompt.strip()

# --- INTERFACE STREAMLIT ---
# --- AVATAR CIRCULAR FIXO COM HTML ---
st.markdown(
    """
    <div style="display: flex; align-items: center;">
        <img src="https://raw.githubusercontent.com/welnecker/roleplay_imagens/main/Mary_fundo1.jpg" 
             style="border-radius: 50%; width: 60px; margin-right: 10px;">
        <div>
            <h1 style="margin-bottom: 0;">üåπ Mary </h1>
            <p style="margin-top: 0;">Converse com Mary com mem√≥ria, emo√ß√£o, planos e continuidade narrativa.</p>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)


with st.sidebar:
    st.selectbox("üíô Modo de narrativa", ["Hot", "Racional", "Flerte", "Janio"], key="modo_mary", index=1)

    modelos_disponiveis = {
        "üí¨ DeepSeek V3 ($) - Criativo, econ√¥mico e vers√°til.": "deepseek/deepseek-chat-v3-0324",
        "üî• MythoMax 13B ($) - Forte em erotismo e envolvimento emocional.": "gryphe/mythomax-l2-13b",
        "üíã LLaMA3 Lumimaid 8B ($) - Ousado, direto e criativo para fantasias r√°pidas.": "neversleep/llama-3-lumimaid-8b",
        "üëë WizardLM 8x22B ($$$) - Di√°logos densos, maduros e emocionais.": "microsoft/wizardlm-2-8x22b",
        "üß† DeepSeek R1 0528 ($$) - Natural, fluido e excelente para cenas longas.": "deepseek/deepseek-r1-0528"
    }

    modelo_selecionado = st.selectbox("ü§ñ Modelo de IA", list(modelos_disponiveis.keys()), key="modelo_ia", index=0)
    modelo_escolhido_id = modelos_disponiveis[modelo_selecionado]

    # Inicializa a flag se n√£o existir
    if "mostrar_video" not in st.session_state:
        st.session_state.mostrar_video = False

    if not st.session_state.mostrar_video:
        if st.button("üéÆ Ver v√≠deo atual"):
            st.session_state.mostrar_video = True
    else:
        if st.button("‚ùå Fechar v√≠deo"):
            st.session_state.mostrar_video = False

    if st.session_state.mostrar_video:
        st.video(f"https://github.com/welnecker/roleplay_imagens/raw/main/{fundo_video}")

    if st.button("üìù Gerar resumo do cap√≠tulo"):
        ultimas = carregar_ultimas_interacoes(n=3)
        texto = "\n".join(f"{m['role']}: {m['content']}" for m in ultimas)
        prompt = f"Resuma o seguinte trecho de conversa como um cap√≠tulo de novela:\n\n{texto}\n\nResumo:"
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": "https://share.streamlit.io/",
                "Content-Type": "application/json"
            },
            json={
                "model": "deepseek/deepseek-chat-v3-0324",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 300,
                "temperature": 0.7
            }
        )
        if response.status_code == 200:
            resumo_gerado = response.json()["choices"][0]["message"]["content"]
            try:
                planilha.worksheet("perfil_mary").append_row(
                    ["", "", "", "", "", "", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), resumo_gerado, ""]
                )
                st.success("Resumo inserido com sucesso!")
            except Exception as e:
                st.error(f"Erro ao inserir resumo: {e}")
        else:
            st.error("Erro ao gerar resumo automaticamente.")

    st.markdown("---")
    st.markdown("üìå **Cenas r√°pidas para iniciar**")

    rotinas = {
        "üåÖ Mary acorda...": "Mary acorda no dia seguinte, com o toque insistente do despertador do celular...",
        "üèãÔ∏è Academia": "Mary chega na academia. Vanessa j√° est√° aguardando ansiosa...",
        "‚òï Encontro no caf√©": "Mary encontra Regina na cafeteria habitual. O clima √© leve...",
        "üèñÔ∏è Praia pela manh√£": "O sol da manh√£ beija a pele de Mary enquanto ela se aproxima da areia...",
        "üõçÔ∏è Entrada da loja": "Na entrada da loja Lingerie Fashion, Mary ajeita o cabelo antes de entrar...",
        "ü™û Diante do espelho": "Mary encara o espelho por longos segundos. Algo em seu olhar hoje est√° diferente...",
        "üõãÔ∏è Noite em casa": "A noite cai l√° fora. Mary acende uma luz suave na sala...",
        "üöó Tr√¢nsito intenso": "Preso no tr√¢nsito, Mary observa os outros carros e deixa a mente vagar...",
        "üíá Sal√£o de beleza": "Mary entra no sal√£o. Os aromas familiares a acolhem...",
        "‚úàÔ∏è In√≠cio de viagem": "A estrada parece infinita. Mary ajeita a mochila no banco do carona e observa o horizonte..."
    }

    prompt_escolhido = st.selectbox("üìñ Escolha uma cena para iniciar", [""] + list(rotinas.keys()), key="prompt_predefinido")
    if prompt_escolhido:
        if st.button("‚ú® Iniciar cena selecionada"):
            prompt = rotinas[prompt_escolhido]
            st.session_state.mensagens.append({"role": "user", "content": prompt})
            salvar_interacao("user", prompt)
            st.experimental_rerun()

    st.markdown("---")
    st.markdown("üß† **Inserir nova mem√≥ria permanente**")

    nova_memoria = st.text_area("Descreva uma mem√≥ria marcante entre Janio e Mary:")
    if st.button("üíæ Salvar mem√≥ria"):
        try:
            planilha.worksheet("memorias").append_row([nova_memoria])
            st.success("Mem√≥ria salva com sucesso!")
        except Exception as e:
            st.error(f"Erro ao salvar mem√≥ria: {e}")

    st.markdown("---")
    st.markdown("üìö **Mem√≥rias fixas salvas**")

    try:
        aba_memorias = planilha.worksheet("memorias")
        linhas = aba_memorias.get_all_values()
        for idx, linha in enumerate(linhas, 1):
            if linha and linha[0].strip():
                st.markdown(f"**{idx}.** {linha[0]}")
    except Exception as e:
        st.error(f"Erro ao carregar mem√≥rias: {e}")



resumo = carregar_perfil_mary().get("sinopse", "[Sem resumo dispon√≠vel]")
st.info(f"\U0001f9e0 *No cap√≠tulo anterior...*\n\n> {resumo}")

# --- EXIBI√á√ÉO DAS MENSAGENS ---
if "mensagens" not in st.session_state:
    st.session_state.mensagens = [{
        "role": "assistant",
        "content": f"üß† *No cap√≠tulo anterior...*\n\n> {resumo}"
    }]


for msg in st.session_state.mensagens:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# --- ENTRADA DO USU√ÅRIO ---
if prompt := st.chat_input("Digite sua mensagem..."):
    with st.chat_message("user"):
        st.markdown(prompt)
    salvar_interacao("user", prompt)
    st.session_state.mensagens.append({"role": "user", "content": prompt})

    with st.spinner("Mary est√° pensando..."):
        mensagens = [{"role": "system", "content": construir_prompt_mary()}]
        fragmentos = carregar_fragmentos()
        if fragmentos:
            mensagens.append(fragmentos)
        mensagens += st.session_state.mensagens[-10:]

        resposta = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": modelo_escolhido_id,
                "messages": mensagens,
                "max_tokens": 1200,
                "temperature": 0.9
            }
        )

        if resposta.status_code == 200:
            conteudo = resposta.json()["choices"][0]["message"]["content"]
            with st.chat_message("assistant"):
                st.markdown(conteudo)
            salvar_interacao("assistant", conteudo)
            st.session_state.mensagens.append({"role": "assistant", "content": conteudo})
        else:
            st.error("Erro ao obter resposta da Mary.")
